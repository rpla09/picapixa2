<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\node\Entity\Node;


/**
 * Implements hook_form_alter().
 */
function health_episode_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  // Solo aplicamos al formulario del tipo "health_episode".
  if ($form_id == 'node_health_episode_form' || $form_id == "node_health_episode_edit_form") {

    $form['#validate'][] = 'health_episode_custom_validate';

    // 🔹 Definición de variables antes de usarlas.
    $episode_type = 'field_episode_type';
    $infection_status = 'field_infection_status';
    $antibiotic_fields = [
      'field_antibiotic_name',
      'field_antibiotic_dose',
      'field_antibiotic_frequency',
    ];
    $fever_temp = 'field_fever_max_temp';
    $followup_fields = ['field_follow_up_phase'];
    $wound_fields = [
      'field_wound_location',
      'field_wound_location_other',
      'field_wound_stage',
      'field_wound_size',
    ];
    $other_type_field = 'field_episode_type_other';

    // Si no existe el campo de tipo de episodio, no hacemos nada.
    if (!isset($form[$episode_type])) {
      return;
    }

    /* --------------------------
     * BLOQUE DE INFECCIÓN
     * -------------------------- */
    if (isset($form[$infection_status])) {
      $form[$infection_status]['#states'] = [
        'visible' => [
          ':input[name="' . $episode_type . '"]' => ['value' => 'infection'],
        ],
      ];
    }

    //if (isset($form['group_infection'])) {
      $form['group_infection']['#states'] = [
        'visible' => [
          ':input[name="' . $episode_type . '"]' => ['value' => 'infection'],
        ],
      ];
    //}

    foreach ($antibiotic_fields as $field) {
      if (isset($form[$field])) {
        $form[$field]['#states'] = [
          'visible' => [
            ':input[name="' . $episode_type . '"]' => [
              ['value' => 'infection'],
              ['value' => 'medication'],
            ],
          ],
        ];
      }
    }

    //if (isset($form['group_medication'])) {
      $form['group_medication']['#states'] = [
        'visible' => [
          ':input[name="' . $episode_type . '"]' => [
            ['value' => 'infection'],
            ['value' => 'medication'],
          ],
        ],
      ];
    //}

    /* --------------------------
     * BLOQUE DE FIEBRE
     * -------------------------- */
    if (isset($form[$fever_temp])) {
      $form[$fever_temp]['#states'] = [
        'visible' => [
          ':input[name="' . $episode_type . '"]' => [
            ['value' => 'infection'],
            ['value' => 'fever'],
          ],
        ],
      ];
    }

    //if (isset($form['group_fever'])) {
      $form['group_fever']['#states'] = [
        'visible' => [
          ':input[name="' . $episode_type . '"]' => [
            ['value' => 'infection'],
            ['value' => 'fever'],
          ],
        ],
      ];
    //}

    /* --------------------------
     * BLOQUE DE SEGUIMIENTO
     * -------------------------- */
    foreach ($followup_fields as $field) {
      if (isset($form[$field])) {
        $form[$field]['#states'] = [
          'visible' => [
            ':input[name="' . $episode_type . '"]' => ['value' => 'follow_up'],
          ],
        ];
      }
    }

    /* --------------------------
     * BLOQUE DE HERIDAS
     * -------------------------- */
    foreach ($wound_fields as $field) {
      if (isset($form[$field])) {
        $form[$field]['#states'] = [
          'visible' => [
            ':input[name="' . $episode_type . '"]' => ['value' => 'wound'],
          ],
        ];
      }
    }

    if (isset($form['field_wound_location_other'])) {
      $form['field_wound_location_other']['#states'] = [
        'visible' => [
          [
            ':input[name="' . $episode_type . '"]' => ['value' => 'wound'],
            ':input[name="field_wound_location"]' => ['value' => 'other'],
          ],
        ],
      ];
    }

    //if (isset($form['group_wound_care'])) {
      $form['group_wound_care']['#states'] = [
        'visible' => [
          ':input[name="' . $episode_type . '"]' => ['value' => 'wound'],
        ],
      ];
    //}

    /* --------------------------
     * BLOQUE “OTHER”
     * -------------------------- */
    if (isset($form[$other_type_field])) {
      $form[$other_type_field]['#states'] = [
        'visible' => [
          ':input[name="' . $episode_type . '"]' => ['value' => 'other'],
        ],
      ];
    }

    /* --------------------------
     * BLOQUE “EPISODE END”
     * -------------------------- */
    if (isset($form['field_end_datetime'])) {
      //$form['field_end_datetime']['widget'][0]['#required'] = FALSE;
      $form['field_end_datetime']['#states'] = [
        'invisible' => [
          [':input[name="field_single_event[value]"]' => ['checked' => TRUE]],
          [
            ':input[name="field_episode_status"]' => ['!value' => 'resolved'],
            ':input[name="field_single_event[value]"]' => ['checked' => FALSE],
          ],
        ],
      ];
    }

    /* --------------------------
     * BLOQUE “SINGLE EVENT”
     * -------------------------- */
    if (isset($form['field_episode_status'])) {
      // Hacer invisible el campo cuando Single event está marcado.
      $form['field_episode_status']['#states'] = [
        'visible' => [
          ':input[name="field_single_event[value]"]' => ['checked' => FALSE],
        ],
      ];
    }

    // Ocultar la opción "completed" cuando Single event está desmarcado.
    if (isset($form['field_episode_status']['widget']['#options']['completed'])) {
      unset($form['field_episode_status']['widget']['#options']['completed']);
    }

    /* --------------------------
     * BLOQUE RELACIÓN ENTRE EPISODIOS
     * -------------------------- */
    if (isset($form['field_related_health_episode']) && isset($form['field_relationship_type'])) {
      $form['field_relationship_type']['#states'] = [
        'visible' => [
          ':input[name="field_related_health_episode[target_id]"]' => ['filled' => TRUE],
        ],
      ];
    }
  }
}

/**
 * Implements hook_node_presave().
 *
 * Limpia automáticamente los campos no aplicables según las condiciones del formulario (#states).
 */
function health_episode_node_presave(Node $node) {
  // Aplicar solo al tipo de contenido "health_episode".
  if ($node->bundle() !== 'health_episode') {
    return;
  }

  // ===============================
  // 1️⃣ VARIABLES DE CONTROL
  // ===============================
  $status = $node->get('field_episode_status')->value ?? NULL;
  $single_event = (bool) ((int) ($node->get('field_single_event')->value ?? 0));
  $episode_type = $node->get('field_episode_type')->value ?? NULL;
  $wound_location = $node->get('field_wound_location')->value ?? NULL;
  $related_episode = $node->get('field_related_health_episode')->target_id ?? NULL;

  // ===============================
  // 2️⃣ EPISODE END
  // Oculto si single_event = TRUE o status != resolved
  // ===============================
  if ($single_event || $status !== 'resolved') {
    $node->set('field_end_datetime', NULL);
  }

  // ===============================
  // 3️⃣ INFECTION
  // Visible solo si type = infection
  // ===============================
  if ($episode_type !== 'infection') {
    $node->set('field_infection_status', NULL);
  }

  // ===============================
  // 4️⃣ ANTIBIOTICS & MEDICATION
  // Visibles solo si type = infection o medication
  // ===============================
  if (!in_array($episode_type, ['infection', 'medication'], TRUE)) {
    foreach (['field_antibiotic_name', 'field_antibiotic_dose', 'field_antibiotic_frequency'] as $field) {
      $node->set($field, NULL);
    }
  }

  // ===============================
  // 5️⃣ FEVER
  // Visible solo si type = infection o fever
  // ===============================
  if (!in_array($episode_type, ['infection', 'fever'], TRUE)) {
    $node->set('field_fever_max_temp', NULL);
  }

  // ===============================
  // 6️⃣ FOLLOW-UP
  // Visible solo si type = follow_up
  // ===============================
  if ($episode_type !== 'follow_up') {
    $node->set('field_follow_up_phase', NULL);
  }

  // ===============================
  // 7️⃣ WOUND
  // Visible solo si type = wound
  // ===============================
  if ($episode_type !== 'wound') {
    foreach (['field_wound_location', 'field_wound_location_other', 'field_wound_stage', 'field_wound_size'] as $field) {
      $node->set($field, NULL);
    }
  }
  else {
    // Si es wound pero no "other" → limpiar campo “other”.
    if ($wound_location !== 'other') {
      $node->set('field_wound_location_other', NULL);
    }
  }

  // ===============================
  // 8️⃣ OTHER TYPE
  // Visible solo si type = other
  // ===============================
  if ($episode_type !== 'other') {
    $node->set('field_episode_type_other', NULL);
  }

  // ===============================
  // 9️⃣ RELACIÓN ENTRE EPISODIOS
  // Relationship type visible solo si hay related episode
  // ===============================
  if (empty($related_episode)) {
    $node->set('field_relationship_type', NULL);
  }
  // Si es single event, establecer automáticamente el status.
  if ($single_event) {
    $node->set('field_episode_status', 'completed');
  }

}

function health_episode_custom_validate($form, FormStateInterface $form_state) {
  $status = $form_state->getValue('field_episode_status')[0]['value'] ?? NULL;

  // Soporte para boolean field con o sin índice [0].
  $single_event_value = $form_state->getValue('field_single_event');
  if (is_array($single_event_value)) {
    if (isset($single_event_value['value'])) {
      $single_event = $single_event_value['value'];
    }
    elseif (isset($single_event_value[0]['value'])) {
      $single_event = $single_event_value[0]['value'];
    }
    else {
      $single_event = 0;
    }
  } else {
    $single_event = $single_event_value;
  }

  // Convertimos a boolean.
  $single_event = (bool) ((int) $single_event);

  $end_date = $form_state->getValue('field_end_datetime')[0]['value'] ?? NULL;

  // Validación médica.
  if ($status === 'resolved' && !$single_event && empty($end_date)) {
    $form_state->setErrorByName(
      'field_end_datetime',
      t('Episode end field is required. Please enter an end date when the episode is resolved and not a single event.')
    );
  }

  // 2️⃣ Validación: coherencia temporal (end ≥ start).
  // if (!empty($start_date) && !empty($end_date)) {
  //   try {
  //     $start = new \DateTime($start_date);
  //     $end = new \DateTime($end_date);
  //     if ($end < $start) {
  //       $form_state->setErrorByName(
  //         'field_end_datetime',
  //         t('The end date cannot be earlier than the start date.')
  //       );
  //     }
  //   }
  //   catch (\Exception $e) {
  //     // Si alguna fecha es inválida, dejamos que Drupal maneje el error base.
  //   }
  // }
}
